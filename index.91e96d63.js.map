{"mappings":"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","sources":["src/js/helpers.js","src/js/model.js","src/js/views/panelView.js","src/js/config.js","src/js/views/mapVIew.js","src/js/controller.js"],"sourcesContent":["// Utility functions\nexport function toMiles(meters) {\n  return meters * 0.000621371192;\n}\nexport function toMeters(miles) {\n  miles * 1609.344;\n}\n\nexport function miliToTime(mili) {\n  return new Date(mili).toISOString().slice(11, -5);\n} // Currently doesnt work for time > 24 hrs\n\nexport function round(number, precision) {\n  return Math.round(number * precision) / precision;\n}\n\n// Function to convert degree minute second coordinates to decimal degrees\nexport function ConvertDMSToDD(degrees, minutes, seconds, direction) {\n  // decimal = degrees + (minutes ÷ 60) + (seconds ÷ 3,600)\n  var dd = degrees + minutes / 60 + seconds / 3600;\n  if (direction == 'S' || direction == 'W') {\n    dd = dd * -1;\n  }\n  return dd;\n}\n","import { ConvertDMSToDD } from './helpers.js';\nexport const state = {\n  imageCoords: [],\n  uploadedImages: [],\n  currentLatLng: [],\n  transportMode: '',\n  routeData: {},\n};\n\n// Extract image EXIF data in a promise\nexport function getExifData(file) {\n  return new Promise(function (resolve, reject) {\n    EXIF.getData(file, function () {\n      const {\n        DateTime,\n        GPSImgDirection,\n        GPSImgDirectionRef,\n        GPSLatitudeRef,\n        GPSLatitude,\n        GPSLongitudeRef,\n        GPSLongitude,\n        Make,\n        Model,\n      } = EXIF.getAllTags(this);\n      const latitude = ConvertDMSToDD(\n        GPSLatitude[0],\n        GPSLatitude[1],\n        GPSLatitude[2],\n        GPSLatitudeRef\n      );\n      const longitude = ConvertDMSToDD(\n        GPSLongitude[0],\n        GPSLongitude[1],\n        GPSLongitude[2],\n        GPSLongitudeRef\n      );\n      const imageData = {\n        DateTime,\n        GPSImgDirection,\n        GPSImgDirectionRef,\n        latitude,\n        longitude,\n        Make,\n        Model,\n      };\n      resolve(imageData);\n      reject(new Error('There was an error '));\n    });\n  });\n}\n\nexport async function getRoute(transportMode) {\n  try {\n    const pointArray = state.imageCoords.map(({ lat, lng }) => [+lng, +lat]);\n    const query = new URLSearchParams({\n      key: 'db56c0cf-613e-456d-baea-46650066da62', // remove from github\n    }).toString();\n    const res = await fetch(`https://graphhopper.com/api/1/route?${query}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        profile: transportMode,\n        points: pointArray,\n        points_encoded: false,\n      }),\n    });\n    const data = await res.json();\n    if (!res.ok) throw new Error(`${data.message}`);\n    return data;\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n}\n\nexport const getPosition = function () {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\n","import { miliToTime, round, toMiles } from '../helpers';\nclass PanelView {\n  _parentElement = document.querySelector('#upload-form');\n  input = document.querySelector('#fileInput');\n  _submitBtn = document.querySelector('#submit-route-btn');\n  _clearBtn = document.querySelector('#clear-btn');\n  _userLocationInput = document.querySelector('#user-location');\n  preview = document.querySelector('#preview');\n  form = document.querySelector('form');\n  routePreviewCard;\n  routePanel;\n  locationPreviewCard;\n\n  addHandlerFileInput(handler) {\n    this.input.addEventListener('change', async function (e) {\n      const fileList = this.files;\n      if (!fileList.length) return;\n      handler(fileList);\n    });\n  }\n  addHandlerRemoveImage(handler) {\n    this.preview.addEventListener(\n      'click',\n      function (e) {\n        const removeBtn = e.target.closest('.preview__card--remove-btn');\n        if (!removeBtn) return;\n        e.stopImmediatePropagation();\n        const imgIndex = e.target.closest('.preview__card').dataset.photoIndex;\n        handler(imgIndex);\n      },\n      true\n    );\n  }\n  addHandlerPreviewClick(handler) {\n    this.preview.addEventListener('click', function (e) {\n      e.preventDefault();\n      const imgIndex = e.target.closest('.preview__card').dataset.photoIndex;\n      if (!imgIndex) return;\n      handler(imgIndex);\n    });\n  }\n  addHandlerRouteCardClick(handler) {\n    document.addEventListener('click', function (e) {\n      const routePreviewCard = e.target.closest('.preview__card--route');\n      if (!routePreviewCard) return;\n      handler();\n    });\n  }\n  addHandlerLocationPreviewClick(handler) {\n    this.preview.addEventListener('click', function (e) {\n      e.preventDefault();\n      const locationPreviewCard = e.target.closest('.location__card');\n      if (!locationPreviewCard) return;\n      handler();\n    });\n  }\n  addHandlerRemoveCurrentLocation(handler) {\n    this.preview.addEventListener('click', function (e) {\n      const removeBtn = e.target.closest('.location__card--remove-btn');\n      if (!removeBtn) return;\n      e.stopImmediatePropagation();\n      handler();\n      const _userLocationInput = document.querySelector('#user-location');\n      _userLocationInput.checked = false; // Why must this be re-declared rather than using declaration from above?\n    });\n  }\n  addHandlerSubmit(handler) {\n    this.form.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      const formData = new FormData(this.form);\n      const transportMode = formData.get('transport-mode');\n      handler(transportMode);\n    });\n  }\n  addHandlerClear(handler) {\n    this._clearBtn.addEventListener('click', (e) => {\n      handler();\n    });\n  }\n  addHandlerUserLocation(handler) {\n    this._userLocationInput.addEventListener('change', (e) => handler(e));\n  }\n  addHandlerRoutePanelBack(handler) {\n    document.addEventListener('click', function (e) {\n      const routePanelBackBtn = e.target.closest('.route-panel--back-btn');\n      if (!routePanelBackBtn) return;\n      handler();\n    });\n  }\n  // Function to print image, info and coords to preview area\n  renderPreviewCard({\n    file,\n    file: { exifdata },\n    latitude,\n    longitude,\n    photoIndex,\n  }) {\n    // Create preview card element\n    const previewCard = document.createElement('div');\n    previewCard.classList.add('preview__card');\n    previewCard.dataset.photoIndex = photoIndex;\n    const previewCardHeader = document.createElement('div');\n    previewCardHeader.classList.add('preview__card--header');\n    const previewCardText = document.createElement('div');\n    previewCardText.classList.add('preview__card--text');\n\n    // Create remove button\n    const previewCardRemoveBtn = document.createElement('button');\n    previewCardRemoveBtn.innerText = 'X';\n    previewCardRemoveBtn.setAttribute('title', 'Remove this item');\n    previewCardRemoveBtn.classList.add('preview__card--remove-btn');\n\n    // Create card image\n    const previewImage = document.createElement('img');\n    previewImage.classList.add('preview__image');\n    previewImage.src = URL.createObjectURL(file);\n\n    // Convert image date from exif data format to javascript format\n    const [year, month, day, hours, minutes, seconds] =\n      exifdata.DateTime.split(/[: ]/);\n    const dateObject = new Date(year, month - 1, day, hours, minutes, seconds);\n\n    previewCardText.innerHTML = `\n\n      <dl>\n        <dt>Date:</dt><dd>${dateObject.toLocaleDateString()}</dd>\n        <dt>Time:</dt><dd>${dateObject.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n        })}</dd>\n        <dt>lat, lng: </dt><dd>${latitude.toFixed(2)}, ${longitude.toFixed(\n      2\n    )}</dd>\n        <dt>Camera:</dd><dd> ${exifdata.Make} ${exifdata.Model}</dd>\n      </dl>\n    `;\n    // Append card items\n    previewCardHeader.appendChild(previewImage);\n    previewCard.appendChild(previewCardHeader);\n    previewCard.appendChild(previewCardRemoveBtn);\n    previewCard.appendChild(previewCardText);\n    this.preview.insertAdjacentElement('afterbegin', previewCard);\n  }\n  renderRoutePreviewCard(routeData) {\n    const routeTime = miliToTime(routeData.paths[0].time);\n    const routeDistance = routeData.paths[0].distance;\n    const routePreviewEl = document.getElementsByClassName(\n      'preview__card--route'\n    );\n    if (!routePreviewEl.length) {\n      this.routePreviewCard = document.createElement('div');\n      this.routePreviewCard.classList.add(\n        'preview__card--text',\n        'preview__card--route',\n        'preview__card'\n      );\n      this.preview.insertAdjacentElement('beforebegin', this.routePreviewCard);\n    }\n    this.routePreviewCard.innerHTML = `\n    <h4>Route</h4>\n    <span><h4>${routeTime}</h4>\n    <p>${round(toMiles(routeDistance), 100)} mi</p>\n    </span>\n    `;\n  }\n  renderRoutePanel(routeData, transportMode) {\n    const routeTime = miliToTime(routeData.paths[0].time);\n    const routeDistance = routeData.paths[0].distance;\n    const routePreviewEl = document.getElementsByClassName('route-panel');\n    if (!routePreviewEl.length) {\n      this.routePanel = document.createElement('div');\n      this.routePanel.classList.add('route-panel', 'preview__card--text');\n    }\n\n    const startPoint = routeData.paths[0].points.coordinates[0].map((e) =>\n      e.toFixed(2)\n    );\n    const endPoint = routeData.paths[0].points.coordinates\n      .pop()\n      .map((e) => e.toFixed(2));\n    this.routePanel.innerHTML = `\n    <h3>Selected Route</h3>\n    <h4>Traveling by ${transportMode} from ${startPoint} to ${endPoint}</h4>\n    <dl>\n      <dt>${routeTime}</dt>\n      <dd>${round(toMiles(routeDistance), 100)} miles</dd>\n    </dl>\n    `;\n\n    const routePanelInstructions = document.createElement('dl');\n    routePanelInstructions.innerHTML = `${routeData.paths[0].instructions\n      .map((step, index) => {\n        return `\n        <dt>${index + 1}</dt>\n        <dd>${step.text}</dd>\n      `;\n      })\n      .join('')}`;\n    this.routePanel.appendChild(routePanelInstructions);\n\n    // Create back button\n    const routePanelBackBtn = document.createElement('button');\n    routePanelBackBtn.innerText = '←';\n    routePanelBackBtn.setAttribute('title', 'Back');\n    routePanelBackBtn.classList.add('route-panel--back-btn');\n    this.routePanel.insertAdjacentElement('afterbegin', routePanelBackBtn);\n\n    this.preview.replaceChildren(this.routePanel);\n  }\n  renderLocationCard(location) {\n    if (!location) return;\n    const locationCardEl = document.getElementsByClassName('location__card');\n    if (!locationCardEl.length) {\n      this.locationPreviewCard = document.createElement('div');\n      this.locationPreviewCard.classList.add(\n        'preview__card',\n        'preview__card--text',\n        'location__card'\n      );\n\n      this.preview.insertAdjacentElement(\n        'afterbegin',\n        this.locationPreviewCard\n      );\n    }\n    this.locationPreviewCard.innerHTML = `\n      <h4>Current Location</h4>\n      <span><h4>${location}</h4>\n      </span>\n    `;\n    // Create remove button\n    const previewCardRemoveBtn = document.createElement('button');\n    previewCardRemoveBtn.innerText = 'X';\n    previewCardRemoveBtn.setAttribute('title', 'Remove current location');\n    previewCardRemoveBtn.classList.add('location__card--remove-btn');\n    this.locationPreviewCard.appendChild(previewCardRemoveBtn);\n  }\n  // Render all cards from state\n  renderAllImgs(state) {\n    state.uploadedImages.map((img) => this.renderPreviewCard(img));\n  }\n}\n\nexport default new PanelView();\n","export const DEFAULT_COORDS = [-77.041493, 38.930859];","import { DEFAULT_COORDS } from '../config';\nimport { miliToTime } from '../helpers';\nconst { MAPBOX_TOKEN } = process.env\nclass MapView {\n  // Leaflet objects and initialization\n  constructor() {\n    this.map = L.map('map').setView([DEFAULT_COORDS[1], DEFAULT_COORDS[0]], 5);\n    this.tiles = L.tileLayer(\n      `https://api.mapbox.com/styles/v1/lanesgood/clhsi5wdt00yk01pffukxf1s4/tiles/{z}/{x}/{y}?access_token=${MAPBOX_TOKEN}`,\n      {\n        minZoom: 0,\n        maxZoom: 22,\n      }\n    );\n    this.routeLine = L.polyline([]); // Set empty routeline to allow later clearing. Will likely later change to array of features to permit multiple lines\n    this.photoMarkers = L.layerGroup();\n    this.currentPositionMarker = L.marker();\n  }\n  render() {\n    this.tiles.addTo(this.map);\n    this.photoMarkers.addTo(this.map);\n  }\n  renderPhotoMarker(latitude, longitude, file, i) {\n    const imageURL = URL.createObjectURL(file);\n    const photoPopup = L.popup({\n      autoClose: false,\n    }).setContent(`<img class='marker-photo' src='${imageURL}' />`);\n    const photoMarker = L.marker([latitude, longitude]);\n    photoMarker.photoIndex = i;\n    this.photoMarkers.addLayer(photoMarker);\n    photoMarker.bindPopup(photoPopup).openPopup();\n  }\n\n  renderRouteLine(routeData) {\n    const routeCoords = routeData.paths[0].points.coordinates.map((coords) => [\n      coords[1],\n      coords[0],\n    ]);\n    const routeTime = miliToTime(routeData.paths[0].time);\n    this.routeLine.setLatLngs(routeCoords).addTo(this.map);\n    this.routeLine.bindPopup(`${routeTime}`).openPopup();\n  }\n  clearRouteLine(){\n    this.routeLine = L.polyline([]);\n  }\n}\nexport default new MapView();\n","import * as model from './model.js';\nimport panelView from './views/panelView.js';\nimport mapView from './views/mapView.js';\nimport { DEFAULT_COORDS } from './config.js';\n\nif (module.hot) {\n  module.hot.accept();\n}\nconst { state } = model;\n\nconst controlAddFiles = async function (fileList) {\n  panelView._submitBtn.disabled = false;\n  let nextPhotoIndex = state.uploadedImages.length; // Initialize with the current count\n  for (let i = 0; i < fileList.length; i++) {\n    const file = fileList[i];\n\n    if (!state.uploadedImages.some((img) => img.file.name === file.name)) {\n      const photoIndex = nextPhotoIndex++;\n\n      try {\n        const exifData = await model.getExifData(file);\n        const { latitude, longitude } = exifData;\n\n        const newImage = {\n          file,\n          photoIndex,\n          latitude,\n          longitude,\n        };\n\n        state.uploadedImages.push(newImage);\n        state.imageCoords.push({\n          photoIndex,\n          lat: latitude,\n          lng: longitude,\n        });\n\n        mapView.renderPhotoMarker(latitude, longitude, file, photoIndex);\n        panelView.renderPreviewCard(newImage);\n        mapView.map.flyToBounds(state.imageCoords);\n      } catch (e) {\n        console.error(e);\n        alert('Could not extract location data for this image');\n      }\n    } else {\n      alert(`${file.name} is already in the destination list`);\n    }\n  }\n\n  mapView.clearRouteLine();\n  panelView.input.value = '';\n};\n  \nconst controlPreviewClick = function (i) {\n  const img = state.imageCoords.find((img) => img.photoIndex === +i);\n  mapView.map.flyTo([img.lat, img.lng], 15);\n  mapView.photoMarkers.eachLayer((layer) => {\n    if (layer.photoIndex === +i) {\n      layer.openPopup();\n    }\n  });\n};\n\nconst controlRouteCardClick = function () {\n  panelView.renderRoutePanel(model.state.routeData, model.state.transportMode);\n};\nconst controlRouteBackClick = function () {\n  panelView.routePanel.remove();\n  panelView.renderAllImgs(state);\n}\n\nconst controlRemoveImage = function (i) {\n  mapView.photoMarkers.eachLayer((layer) => {\n    if (layer.photoIndex === +i) {\n      mapView.map.removeLayer(layer);\n    }\n  });\n  panelView.preview.removeChild(\n    panelView.preview.querySelector(`[data-photo-index=\"${i}\"]`)\n  );\n  state.uploadedImages = state.uploadedImages.filter(\n    (img) => img.photoIndex !== +i\n  );\n  state.imageCoords = state.imageCoords.filter((img) => img.photoIndex !== +i);\n  mapView.clearRouteLine();\n};\n\nconst controlUserLocation = async function (e) {\n  if (e.target.checked) {\n    try {\n      const {\n        coords: { latitude, longitude },\n      } = await model.getPosition();\n      state.currentLatLng.push(latitude, longitude);\n      // Add current location from coordinates array\n      state.imageCoords.push({\n        photoIndex: 1000,\n        lat: latitude,\n        lng: longitude,\n      });\n      // Add current location marker\n      mapView.currentPositionMarker.setLatLng(state.currentLatLng);\n      mapView.currentPositionMarker.bindPopup('Current location');\n      mapView.photoMarkers.addLayer(mapView.currentPositionMarker);\n\n      // Add current location preview card\n      panelView.renderLocationCard(state.currentLatLng);\n      mapView.currentPositionMarker.openPopup();\n      mapView.map.flyToBounds(state.imageCoords);\n    } catch (e) {\n      console.error(e);\n      alert('User location not available'); // Replace with toast\n    }\n  } else if (!e.target.checked) {\n    // Remove current location marker\n    if (mapView.map.hasLayer(mapView.currentPositionMarker)) {\n      mapView.map.removeLayer(mapView.currentPositionMarker);\n    }\n    // Remove current location from coords array\n    state.imageCoords = state.imageCoords.filter(\n      (imgCoord) =>\n        !(\n          imgCoord.lat === state.currentLatLng[0] &&\n          imgCoord.lng === state.currentLatLng[1]\n        )\n    );\n    // Remove current lat long\n    state.currentLatLng.length = 0;\n\n    // Set map view based on existing images\n    if (state.imageCoords.length > 0) {\n      mapView.map.flyToBounds(state.imageCoords);\n    } else {\n      mapView.map.flyTo([DEFAULT_COORDS[1], DEFAULT_COORDS[0]], 10);\n    }\n    // Remove location preview card\n    panelView.preview.removeChild(panelView.locationPreviewCard);\n    // Remove current position marker\n    mapView.photoMarkers.removeLayer(mapView.currentPositionMarker);\n    return state.imageCoords;\n  }\n};\nconst controlLocationPreviewClick = function () {\n  mapView.map.flyTo([state.currentLatLng[0], state.currentLatLng[1]], 15);\n};\n\nconst controlRemoveLocationPreview = function () {\n  // Remove current location from coords array\n  state.imageCoords = state.imageCoords.filter(\n    (imgCoord) =>\n      !(\n        imgCoord.lat === state.currentLatLng[0] &&\n        imgCoord.lng === state.currentLatLng[1]\n      )\n  );\n  // Remove current lat long\n  state.currentLatLng.length = 0;\n  // Remove location preview card\n  panelView.preview.removeChild(panelView.locationPreviewCard);\n  // Remove map marker for current location\n  if (mapView.map.hasLayer(mapView.currentPositionMarker)) {\n    mapView.map.removeLayer(mapView.currentPositionMarker);\n  }\n};\n\nconst controlSubmit = async function (transportMode) {\n  state.transportMode = transportMode;\n  const routeData = await model.getRoute(state.transportMode);\n  state.routeData = routeData;\n  mapView.map.flyToBounds(state.imageCoords);\n  mapView.renderRouteLine(state.routeData);\n  panelView.renderRoutePreviewCard(state.routeData);\n};\n\nconst controlClear = function () {\n  // Remove all images\n  state.uploadedImages.length = 0;\n  state.imageCoords.length = 0;\n  // remove all photo markers\n  mapView.photoMarkers.clearLayers();\n  // remove route from map\n  mapView.clearRouteLine();\n  // Reset map view\n  mapView.map.flyTo([DEFAULT_COORDS[1], DEFAULT_COORDS[0]], 10);\n  // Remove all image previews\n  panelView.preview.replaceChildren();\n  !!panelView.routePreviewCard && panelView.routePreviewCard.remove();\n  panelView.routePanel.remove();\n\n  // reset to default coords/world view\n  panelView.form.reset();\n  panelView._submitBtn.disabled = true;\n};\n\nconst init = function () {\n  console.log('Snappy trails is up and running. Reticulating splines');\n\n  state.imageCoords.length > 0 && panelView.renderAllImgs(state);\n  mapView.render();\n  panelView.addHandlerUserLocation(controlUserLocation);\n  panelView.addHandlerFileInput(controlAddFiles);\n  panelView.addHandlerPreviewClick(controlPreviewClick);\n  panelView.addHandlerLocationPreviewClick(controlLocationPreviewClick);\n  panelView.addHandlerRemoveCurrentLocation(controlRemoveLocationPreview);\n  panelView.addHandlerRemoveImage(controlRemoveImage);\n  panelView.addHandlerSubmit(controlSubmit);\n  panelView.addHandlerRouteCardClick(controlRouteCardClick);\n  panelView.addHandlerRoutePanelBack(controlRouteBackClick);\n  panelView.addHandlerClear(controlClear);\n};\ninit();\n"],"names":["$bd02c871d9c5ba8e$export$e336666bf7450545","meters","$bd02c871d9c5ba8e$export$fd49f38c4a455c6d","mili","Date","toISOString","slice","$bd02c871d9c5ba8e$export$2077e0241d6afd3c","number","precision","Math","round","$bd02c871d9c5ba8e$export$3715616f3d4d8e41","degrees","minutes","seconds","direction","dd","$0f1d4402dffacf5b$export$ca000e230c0caa3e","imageCoords","uploadedImages","currentLatLng","transportMode","routeData","$0f1d4402dffacf5b$export$dd3a48f74d5a1199","file","Promise","resolve","reject","EXIF","getData","DateTime","GPSImgDirection","GPSImgDirectionRef","GPSLatitudeRef","GPSLatitude","GPSLongitudeRef","GPSLongitude","Make","Model","getAllTags","this","latitude","longitude","Error","async","$0f1d4402dffacf5b$export$da6d2f7032b7150b","pointArray","map","lat","lng","query","URLSearchParams","key","toString","res","fetch","method","headers","body","JSON","stringify","profile","points","points_encoded","data","json","ok","message","error","console","$0f1d4402dffacf5b$export$1690e12b840569b9","navigator","geolocation","getCurrentPosition","$4bc90fbbdfa17099$export$2e2bcd8739ae039","_parentElement","document","querySelector","input","_submitBtn","_clearBtn","_userLocationInput","preview","form","routePreviewCard","routePanel","locationPreviewCard","addHandlerFileInput","handler","addEventListener","e","fileList","files","length","addHandlerRemoveImage","target","closest","stopImmediatePropagation","imgIndex","dataset","photoIndex","addHandlerPreviewClick","preventDefault","addHandlerRouteCardClick","addHandlerLocationPreviewClick","addHandlerRemoveCurrentLocation","checked","addHandlerSubmit","FormData","get","addHandlerClear","addHandlerUserLocation","addHandlerRoutePanelBack","renderPreviewCard","exifdata","previewCard","createElement","classList","add","previewCardHeader","previewCardText","previewCardRemoveBtn","innerText","setAttribute","previewImage","src","URL","createObjectURL","year","month","day","hours","split","dateObject","innerHTML","toLocaleDateString","toLocaleTimeString","hour","minute","toFixed","appendChild","insertAdjacentElement","renderRoutePreviewCard","routeTime","paths","time","routeDistance","distance","getElementsByClassName","renderRoutePanel","startPoint","coordinates","endPoint","pop","routePanelInstructions","instructions","step","index","text","join","routePanelBackBtn","replaceChildren","renderLocationCard","location","renderAllImgs","state","img","$ba30e20475feac5a$export$2caadec3201a577","$de3795e4974290a6$export$2e2bcd8739ae039","constructor","L","setView","tiles","tileLayer","minZoom","maxZoom","routeLine","polyline","photoMarkers","layerGroup","currentPositionMarker","marker","render","addTo","renderPhotoMarker","i","imageURL","photoPopup","popup","autoClose","setContent","photoMarker","addLayer","bindPopup","openPopup","renderRouteLine","routeCoords","coords","setLatLngs","clearRouteLine","$f50bd1f2915ed0f2$var$state","$0f1d4402dffacf5b$exports","$f50bd1f2915ed0f2$var$controlAddFiles","disabled","nextPhotoIndex","some","name","alert","exifData","getExifData","newImage","push","flyToBounds","value","$f50bd1f2915ed0f2$var$controlPreviewClick","find","flyTo","eachLayer","layer","$f50bd1f2915ed0f2$var$controlRouteCardClick","$f50bd1f2915ed0f2$var$controlRouteBackClick","remove","$f50bd1f2915ed0f2$var$controlRemoveImage","removeLayer","removeChild","filter","$f50bd1f2915ed0f2$var$controlUserLocation","getPosition","setLatLng","hasLayer","imgCoord","$f50bd1f2915ed0f2$var$controlLocationPreviewClick","$f50bd1f2915ed0f2$var$controlRemoveLocationPreview","$f50bd1f2915ed0f2$var$controlSubmit","getRoute","$f50bd1f2915ed0f2$var$controlClear","clearLayers","reset","log"],"version":3,"file":"index.91e96d63.js.map"}